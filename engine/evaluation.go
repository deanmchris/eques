package engine

const (
	InfinityCPValue int16 = 10_000
	DrawCPValue     int16 = 0
)

var PieceSquareTable = [6][64]int16{
	{
		// Pawn PST
		100, 100, 100, 100, 100, 100, 100, 100,
		125, 126, 120, 116, 114, 113, 117, 122,
		129, 120, 115, 119, 124, 120, 115, 123,
		101, 102,  91, 104, 113,  96, 106, 102,
		 89,  89,  89,  96, 100,  91,  85,  83,
		 80,  84,  92,  91,  98,  86,  96,  82,
		 75,  80,  85,  73,  75,  93,  84,  73,
		100, 100, 100, 100, 100, 100, 100, 100,
	},
	{
		// Knight PST
		289, 295, 298, 299, 300, 296, 300, 290,
		283, 295, 304, 304, 296, 307, 300, 292,
		296, 310, 303, 318, 308, 306, 308, 295,
		297, 313, 310, 325, 318, 321, 313, 299,
		289, 303, 315, 309, 312, 312, 294, 293,
		288, 288, 298, 304, 312, 303, 298, 289,
		288, 284, 289, 296, 294, 294, 279, 270,
		274, 268, 285, 283, 276, 273, 264, 282,
	},
	{
		// Bishop PST
		302, 300, 300, 303, 304, 299, 301, 295,
		297, 306, 302, 301, 308, 302, 306, 290,
		306, 311, 313, 313, 322, 315, 303, 316,
		309, 312, 318, 325, 321, 307, 322, 308,
		307, 311, 319, 320, 315, 320, 306, 308,
		321, 314, 315, 313, 319, 319, 303, 298,
		298, 322, 304, 306, 322, 315, 316, 306,
		304, 305, 302, 302, 301, 297, 303, 300,
	},
	{
		// Rook PST
		505, 508, 505, 504, 503, 500, 505, 505,
		510, 513, 517, 513, 513, 505, 511, 508,
		505, 508, 505, 505, 507, 503, 502, 502,
		497, 496, 497, 501, 499, 502, 495, 494,
		486, 495, 497, 500, 497, 495, 494, 494,
		470, 493, 492, 495, 501, 492, 485, 474,
		477, 488, 494, 499, 493, 494, 490, 466,
		477, 487, 494, 506, 500, 501, 483, 475,
	},
	{
		// Queen PST
		847, 852, 854, 854, 854, 852, 851, 843,
		845, 848, 861, 850, 852, 852, 852, 841,
		855, 862, 849, 865, 864, 856, 852, 856,
		846, 848, 850, 857, 859, 856, 859, 841,
		852, 843, 854, 850, 856, 860, 853, 849,
		852, 855, 856, 848, 861, 853, 861, 853,
		842, 852, 858, 852, 863, 864, 838, 852,
		844, 840, 851, 844, 853, 845, 836, 844,
	},
	{
		// King PST
		  0,   0,  -1,   0,   0,   0,   0,   0,
		  0,   2,   0,   1,   3,   4,   2,   0,
		 -4,  -1,   5,   6,   7,   6,   5,   2,
		 -1,   1,   4,   9,  14,   2,   4,  -2,
		 -8,  -2,   2,   6,   9,   3,  -1,   0,
		 -8,  -7,  -2,  -1,   0,  -5,   9, -10,
		-20, -16,   0, -12,  -4,   2,   7,   0,
		-11,  -7,  -5, -12,   0,   6,  15,   1,
	},
}

var FlipSq = [2][64]uint8{
	{
		A8, B8, C8, D8, E8, F8, G8, H8,
		A7, B7, C7, D7, E7, F7, G7, H7,
		A6, B6, C6, D6, E6, F6, G6, H6,
		A5, B5, C5, D5, E5, F5, G5, H5,
		A4, B4, C4, D4, E4, F4, G4, H4,
		A3, B3, C3, D3, E3, F3, G3, H3,
		A2, B2, C2, D2, E2, F2, G2, H2,
		A1, B1, C1, D1, E1, F1, G1, H1,
	},
	{
		A1, B1, C1, D1, E1, F1, G1, H1,
		A2, B2, C2, D2, E2, F2, G2, H2,
		A3, B3, C3, D3, E3, F3, G3, H3,
		A4, B4, C4, D4, E4, F4, G4, H4,
		A5, B5, C5, D5, E5, F5, G5, H5,
		A6, B6, C6, D6, E6, F6, G6, H6,
		A7, B7, C7, D7, E7, F7, G7, H7,
		A8, B8, C8, D8, E8, F8, G8, H8,
	},
}

func EvaluatePosition(pos *Position) int16 {
	return pos.Scores[pos.Side] - pos.Scores[pos.Side^1]
}
